// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Tables {
  id     Int    @id @default(autoincrement())
  status String
  slot   String
  seats  Int
}

model Booking {
  id    String @id @default(uuid())
  name  String
  order Order?
}

model Order {
  id      String   @id @default(uuid())
  name    String
  Booking Booking? @relation(fields: [bID], references: [id])
  bID     String   @unique
  // Menu    Menu[]
}

model Menu {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  // Order       Order[]
=======

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  role UserRole @default(USER)

  image    String?
  accounts Account[]
  sessions Session[]

  checkoutItems CheckoutItem[]
}

model CheckoutItem {
  id     String @id @default(cuid())
  user   User?  @relation(fields: [userId], references: [id])
  userId String

  name     String
  price    Float
  imageURL String
  quantity Int

}
